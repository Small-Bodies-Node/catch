#!/usr/bin/env python3
# Licensed with the 3-clause BSD license.  See LICENSE for details.

import os
import sys
import argparse
import pyds9
from astropy.table import Table
from catch import Catch, Config

parser = argparse.ArgumentParser('caught')
parser.add_argument(
    '-v', action='store_true', help='increase verbosity')
parser.add_argument(
    '--config', help='CATCH configuration file')
parser.add_argument(
    '--archive_path', help='path for archive files')
parser.add_argument(
    '--cutout_path', help='path for cutout files')
parser.add_argument(
    '--sessionid', help='CATCH session ID')
subparsers = parser.add_subparsers(help='sub-commands')


def display(files, found):
    """Display images in DS9."""
    if len(files) == 0:
        return

    ds9 = pyds9.DS9('caught', wait=30)
    for i, fn in enumerate(files):
        ds9.set('frame {}'.format(i + 1))
        ds9.set('file {}'.format(fn))
        ds9.set('zscale')
        circle = 'fk5; circle({},{},10")'.format(found[i].ra, found[i].dec)
        ds9.set('regions', circle)
        ds9.set('pan to {} {} wcs fk5'.format(found[i].ra, found[i].dec))

    ds9.set('frame 1')


def image_filename(obs, format='full'):
    """Generate image filename from observation metadata."""
    if format not in ['full', 'cutout']:
        raise ValueError('format')

    if obs.source in ['neat_palomar', 'neat_maui_geodss']:
        fn = '{}.fit.fz'.format(obs.productid)
        if format == 'full':
            fn = fn.replace('_', '/').lower()
        elif format == 'cutout':
            fn = fn.replace('.fit.fz', '_cutout.fits')
    else:
        raise NotImplemented('source: {}'.format(obs.source))

    return fn


## full-size ###########################################################
parser_full = subparsers.add_parser(
    'full-size', aliases=['full'],
    help='print and display full-sized images with caught object')

parser_full.add_argument(
    'queryid', type=int)
parser_full.add_argument(
    '--ds9', action='store_true')
parser_full.add_argument(
    '--limit', type=int, default=10,
    help='limit displayed images (default 10)')


def full_size(args):
    with Catch(Config.from_args(args), disable_log=True) as catch:
        rows = catch.caught(args.queryid)
        if len(rows) == 0:
            print('Nothing caught for queryid {}'.format(args.queryid))

        files = []
        founds = []
        # CatchQueries, Caught, Obs, Found, Obj
        for (cq, caught, obs, found, obj) in rows:
            fn = os.path.join(catch.config['archive path'],
                              image_filename(obs))
            files.append(fn)
            founds.append(found)
            print(fn)

        if args.ds9:
            display(files[:args.limit], founds)


parser_full.set_defaults(func=full_size)

## cutouts #############################################################
parser_cutouts = subparsers.add_parser(
    'cutouts',
    help='print and display image cutouts with caught object')

parser_cutouts.add_argument(
    'queryid', type=int)
parser_cutouts.add_argument(
    '--ds9', action='store_true')
parser_cutouts.add_argument(
    '--limit', type=int, default=30,
    help='limit displayed images (default 30)')


def cutouts(args):
    with Catch(Config.from_args(args), disable_log=True) as catch:
        rows = catch.caught(args.queryid)
        if len(rows) == 0:
            print('Nothing caught for queryid {}'.format(args.queryid))

        files = []
        founds = []
        # CatchQueries, Caught, Obs, Found, Obj
        for (cq, caught, obs, found, obj) in rows:
            fn = os.path.join(
                catch.config['cutout path'], catch.config['sessionid'],
                str(args.queryid), image_filename(obs, format='cutout'))
            files.append(fn)
            founds.append(found)
            print(fn)

        if args.ds9:
            display(files[:args.limit], founds)


parser_cutouts.set_defaults(func=cutouts)

## generate-cutouts ####################################################
parser_generate = subparsers.add_parser(
    'generate-cutouts', aliases=['generate'],
    help='generate image cutouts with caught object')

parser_generate.add_argument(
    'queryid', type=int)
parser_generate.add_argument(
    '--force', action='store_true',
    help='overwrite existing images')


def generate_cutouts(args):
    with Catch(Config.from_args(args), save_log=True) as catch:
        catch.cutouts(args.queryid, force=args.force)


parser_generate.set_defaults(func=generate_cutouts)

########################################################################

args = parser.parse_args()
try:
    getattr(args, 'func')
except AttributeError as e:
    parser.print_help()
    sys.exit()

try:
    args.func(args)
except Exception as e:
    if args.v:
        raise(e)
    else:
        print(str(e))
        sys.exit()
