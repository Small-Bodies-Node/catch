#!/usr/bin/env python3
# Licensed with the 3-clause BSD license.  See LICENSE for details.

import argparse
import uuid
from astropy.table import Table
from catch import Catch, Config
from catch.config import _config_example

parser = argparse.ArgumentParser(
    'catch',
    epilog=f'Configuration files are JSON-formatted:\n{_config_example}'
)
parser.add_argument('desg')
parser.add_argument(
    '--source', dest='sources', action='append',
    help='search this observation source (may be used multiple times)')
parser.add_argument('--force', dest='cached', action='store_false',
                    help='do not use cached results')
parser.add_argument('--config', help='CATCH configuration file')
parser.add_argument('--debug', action='store_true', help='debug mode')

args = parser.parse_args()


SKIP_COLUMNS = ['terms', 'metadata', 'cutout_url', 'preview_url', 'set_fov']

rows = []
config = Config.from_args(args)
with Catch.with_config(config) as catch:
    job_id = uuid.uuid4()
    count = catch.query(args.desg, job_id, sources=args.sources,
                        cached=args.cached, debug=args.debug)
    columns = set()
    for row in catch.caught(job_id):
        r = {}
        for table in row:
            for k in dir(type(table)):
                if (k.startswith('_') or k in SKIP_COLUMNS):
                    continue
                r[k] = getattr(table, k)
        columns = columns.union(set(r.keys()))

        r['url'] = row.Observation.cutout_url(row.Found.ra, row.Found.dec)

        rows.append(r)

if rows == []:
    print('# none found')
else:
    # make sure all rows have all columns
    for i in range(len(rows)):
        for col in columns:
            rows[i][col] = rows[i].get(col)
    tab = Table(rows=rows)
    tab.pprint(-1, -1)
