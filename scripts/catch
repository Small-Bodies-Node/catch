#!/usr/bin/env python3
# Licensed with the 3-clause BSD license.  See LICENSE for details.

import argparse
import uuid
import logging
from astropy.table import Table
from catch import Catch, Config

sources = list(Catch.SOURCES.keys())

parser = argparse.ArgumentParser('catch')
parser.add_argument('desg')
parser.add_argument(
    '--source', dest='sources', action='append', choices=sources,
    help='search these observation sources')
parser.add_argument(
    '--force', dest='cached', action='store_false',
    help='do not use cached results')
parser.add_argument(
    '--config', help='CATCH configuration file')
parser.add_argument(
    '--debug', action='store_true', help='debug mode')

args = parser.parse_args()


def cutout_url(row):
    if row.Obs.source == 'skymapper':
        return Catch.skymapper_cutout_url(row.Found, row.Obs)


rows = []
with Catch(Config.from_args(args), save_log=True, debug=args.debug) as catch:
    job_id = uuid.uuid4()
    count = catch.query(args.desg, job_id, sources=args.sources,
                        cached=args.cached, eph_source='jpl')
    columns = set()
    for row in catch.caught(job_id):
        r = {}
        for table in row:
            for k in dir(type(table)):
                if k.startswith('_'):
                    continue
                r[k] = getattr(table, k)
        columns = columns.union(set(r.keys()))

        r['url'] = cutout_url(row)

        rows.append(r)

if rows == []:
    print('# none found')
else:
    # make sure all rows have all columns; probably want a faster solution in the future
    for i in range(len(rows)):
        new_row = dict.fromkeys(columns)
        new_row.update(rows[i])
        rows[i] = new_row
    tab = Table(rows=rows)
    tab.pprint(-1, -1)
