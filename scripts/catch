#!/usr/bin/env python3
# Licensed with the 3-clause BSD license.  See LICENSE for details.

import argparse
import uuid
import logging
from astropy.table import Table
from catch import Catch, Config

sources = list(Catch.SOURCES.keys()) + ['any']

parser = argparse.ArgumentParser('catch')
parser.add_argument('desg')
parser.add_argument(
    '--source', default='any', choices=sources,
    help='search this observation source')
parser.add_argument(
    '--force', dest='cached', action='store_false',
    help='do not use cached results')
parser.add_argument(
    '--config', help='CATCH configuration file')
parser.add_argument(
    '--debug', action='store_true', help='debug mode')

args = parser.parse_args()


def ps1cutout_url(row):
    """Return PS1 DR2 cutout URL."""
    if 'skycell' in row['productid']:
        url = (
            'https://ps1images.stsci.edu/cgi-bin/fitscut.cgi?'
            f'red=rings.v3.skycell/{row["projection_id"]:04d}'
            f'/{row["skycell_id"]:03d}/{row["productid"]}'
            f'&ra={row["ra"]}&dec={row["dec"]}&size=300'
            '&format=jpeg'
        )
    else:
        url = None
    return url


rows = []
with Catch(Config.from_args(args), save_log=True, debug=args.debug) as catch:
    job_id = uuid.uuid4()
    count = catch.query(args.desg, job_id, source=args.source, cached=args.cached,
                        eph_source='jpl')
    columns = set()
    for row in catch.caught(job_id):
        r = {}
        for table in row:
            for k in table.__table__.columns.keys():
                r[k] = getattr(table, k)
        r['cutout'] = ps1cutout_url(r)
        columns = columns.union(r.keys())
        rows.append(r)

if rows == []:
    print('# none found')
else:
    # make sure all rows have all columns; probably want a faster solution in the future
    for i in range(len(rows)):
        new_row = dict.fromkeys(columns)
        new_row.update(rows[i])
        rows[i] = new_row
    tab = Table(rows=rows)
    tab.pprint(-1, -1)
