#!/bin/bash -eu

### create virtual environment for daily harvesting of surveys for CATCH
test ! -e .venv && python3 -m venv .venv --prompt='catch-v1'
source .venv/bin/activate
python3 -m pip install -U pip setuptools wheel

pushd .
mkdir -p build
cd build

# install s2geometry library
S2HASH=a4dddf40647c68cd0104eafc31e9c8fb247a6308

test ! -e ${S2HASH}.tar.gz && wget https://github.com/google/s2geometry/archive/${S2HASH}.tar.gz
test ! -e s2geometry-${S2HASH} && tar xzf ${S2HASH}.tar.gz

# apply patch so we can build without google's testing library
test ! -e 78.patch && wget https://patch-diff.githubusercontent.com/raw/google/s2geometry/pull/78.patch
cd s2geometry-${S2HASH}
test ! -e CMakeLists.txt.orig && patch -i ../78.patch

mkdir -p build
cd build
cmake -DCMAKE_INSTALL_PREFIX=$VIRTUAL_ENV ..
make -j $(nproc)
make install

popd

# install python libraries
pip install numpy sbpy cython psycopg2-binary
LDFLAGS="-L$VIRTUAL_ENV/lib -Wl,-rpath=$VIRTUAL_ENV/lib" pip install -e git+https://git@github.com/Small-Bodies-Node/sbsearch.git#egg=sbsearch
pip install -e .
pip install matplotlib spherical_geometry pycairo pygobject ipython

## update s2 someday? ...

# install abseil

# install abseil from source, as per s2geometry's readme
# (it must be configured with -DCMAKE_POSITION_INDEPENDENT_CODE=ON)
# ABSEIL_HASH=9edef2349c8c4ace11b4a1b97365cf9c9a293dc8

# test ! -e ${ABSEIL_HASH}.tar.gz && wget https://github.com/abseil/abseil-cpp/archive/${ABSEIL_HASH}.tar.gz
# test ! -e abseil-cpp-${ABSEIL_HASH} && tar xzf ${ABSEIL_HASH}.tar.gz

# cd abseil-cpp-${ABSEIL_HASH}
# mkdir -p build
# cd build
# cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_CXX_STANDARD=11 -DCMAKE_INSTALL_PREFIX=$VIRTUAL_ENV ..
# make -j $(nproc)
# make install
# cd ../..

# # install s2geometry library
# S2_HASH=7a40135059545396237a0199c558d749fe3be0b1

# test ! -e ${S2_HASH}.tar.gz && wget https://github.com/google/s2geometry/archive/${S2_HASH}.tar.gz
# test ! -e s2geometry-${S2_HASH} && tar xzf ${S2_HASH}.tar.gz

# cd s2geometry-${S2_HASH}
# mkdir -p build
# cd build
# cmake -DCMAKE_PREFIX_PATH=$VIRTUAL_ENV -DCMAKE_CXX_STANDARD=11 -DCMAKE_INSTALL_PREFIX=$VIRTUAL_ENV ..
# make -j $(nproc)
# make install
