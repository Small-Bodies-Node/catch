[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "catch"
description = "Planetary Data System Small-Bodies Node astronomical survey search tool."
keywords = ["astronomy", "astrophysics", "planetary", "asteroid", "comet", "space", "science"]
package_name = "catch"
readme = "README.md"
authors = [
    { name = "Michael S. P. Kelley", email = "msk@astro.umd.edu" }
]
license = { text = "BSD 3-Clause License" }
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.17.0",
    "astropy>=5.1",
    "astroquery>=0.4.5",
    "pds4_tools>=1.3",
    "sbpy>0.3.0",
    "sbsearch>=2.1.0dev0",
    "catch>=1.3.0dev0",
]
dynamic = [ "version" ]

[project.urls]
Homepage = "https://catch.astro.umd.edu"
Repository = "https://github.com/Small-Bodies-Node/catch"

[project.optional_dependencies]
test = [
    "pytest>=4.6",
    "pytest-astropy",
    "coverage",
    "testing.postgresql",
]
figures = [
    "spherical_geometry",
    "healpy",
    "matplotlib",
]

[project.scripts]
catch = "catch:catch_cli"

[tool.setuptools]
zip_save = False
include_package_data = False

[tool.setuptools.packages.find]

[tool.setuptools_scm]
write_to = "catch/version.py"

[tool.pytest.ini_options]
minversion = 4.6
addopts = "--doctest-rst --cov=catch --cov-report=html"
doctest_plus = enabled
remote_data_strict = true
doctest_norecursedirs = [ "*/setup_package.py" ]

[tools.coverage.run]
omit = [
    "catch/test/*",
    "catch/version*",
    "catch/setup_package.py",
]

[tools.coverage.report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    # Don't complain about packages we have installed
    except ImportError
    # Don't complain if tests don't hit assertions
    raise AssertionError
    raise NotImplementedError
    # Don't complain about script hooks
    def main\(.*\):
    # Ignore branches that don't pertain to this version of Python
    pragma: py{ignore_python_version}
    # Don't complain about IPython completion helper
    def _ipython_key_completions_
